// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_test.proto

#include "grpc_test.pb.h"
#include "grpc_test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_test {

static const char* ProtoTest_method_names[] = {
  "/grpc_test.ProtoTest/doRequest",
};

std::unique_ptr< ProtoTest::Stub> ProtoTest::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProtoTest::Stub> stub(new ProtoTest::Stub(channel));
  return stub;
}

ProtoTest::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_doRequest_(ProtoTest_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProtoTest::Stub::doRequest(::grpc::ClientContext* context, const ::grpc_test::MessageData& request, ::grpc_test::MessageData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_test::MessageData, ::grpc_test::MessageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doRequest_, context, request, response);
}

void ProtoTest::Stub::experimental_async::doRequest(::grpc::ClientContext* context, const ::grpc_test::MessageData* request, ::grpc_test::MessageData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_test::MessageData, ::grpc_test::MessageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doRequest_, context, request, response, std::move(f));
}

void ProtoTest::Stub::experimental_async::doRequest(::grpc::ClientContext* context, const ::grpc_test::MessageData* request, ::grpc_test::MessageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_test::MessageData>* ProtoTest::Stub::PrepareAsyncdoRequestRaw(::grpc::ClientContext* context, const ::grpc_test::MessageData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_test::MessageData, ::grpc_test::MessageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_test::MessageData>* ProtoTest::Stub::AsyncdoRequestRaw(::grpc::ClientContext* context, const ::grpc_test::MessageData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProtoTest::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtoTest_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtoTest::Service, ::grpc_test::MessageData, ::grpc_test::MessageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtoTest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_test::MessageData* req,
             ::grpc_test::MessageData* resp) {
               return service->doRequest(ctx, req, resp);
             }, this)));
}

ProtoTest::Service::~Service() {
}

::grpc::Status ProtoTest::Service::doRequest(::grpc::ServerContext* context, const ::grpc_test::MessageData* request, ::grpc_test::MessageData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_test

