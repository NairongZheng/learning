// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpc_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpc_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_5ftest_2eproto;
namespace grpc_test {
class CountAndSumListReq;
class CountAndSumListReqDefaultTypeInternal;
extern CountAndSumListReqDefaultTypeInternal _CountAndSumListReq_default_instance_;
class CountAndSumListRsp;
class CountAndSumListRspDefaultTypeInternal;
extern CountAndSumListRspDefaultTypeInternal _CountAndSumListRsp_default_instance_;
class CountAndSumResInstruct;
class CountAndSumResInstructDefaultTypeInternal;
extern CountAndSumResInstructDefaultTypeInternal _CountAndSumResInstruct_default_instance_;
class CountAndSumResInstruct_CountDictEntry_DoNotUse;
class CountAndSumResInstruct_CountDictEntry_DoNotUseDefaultTypeInternal;
extern CountAndSumResInstruct_CountDictEntry_DoNotUseDefaultTypeInternal _CountAndSumResInstruct_CountDictEntry_DoNotUse_default_instance_;
class GetMinDisReq;
class GetMinDisReqDefaultTypeInternal;
extern GetMinDisReqDefaultTypeInternal _GetMinDisReq_default_instance_;
class GetMinDisRsp;
class GetMinDisRspDefaultTypeInternal;
extern GetMinDisRspDefaultTypeInternal _GetMinDisRsp_default_instance_;
class Letter;
class LetterDefaultTypeInternal;
extern LetterDefaultTypeInternal _Letter_default_instance_;
class MessageData;
class MessageDataDefaultTypeInternal;
extern MessageDataDefaultTypeInternal _MessageData_default_instance_;
class NumList;
class NumListDefaultTypeInternal;
extern NumListDefaultTypeInternal _NumList_default_instance_;
class UpperLettersReq;
class UpperLettersReqDefaultTypeInternal;
extern UpperLettersReqDefaultTypeInternal _UpperLettersReq_default_instance_;
class UpperLettersRsp;
class UpperLettersRspDefaultTypeInternal;
extern UpperLettersRspDefaultTypeInternal _UpperLettersRsp_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
class VectorList;
class VectorListDefaultTypeInternal;
extern VectorListDefaultTypeInternal _VectorList_default_instance_;
}  // namespace grpc_test
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_test::CountAndSumListReq* Arena::CreateMaybeMessage<::grpc_test::CountAndSumListReq>(Arena*);
template<> ::grpc_test::CountAndSumListRsp* Arena::CreateMaybeMessage<::grpc_test::CountAndSumListRsp>(Arena*);
template<> ::grpc_test::CountAndSumResInstruct* Arena::CreateMaybeMessage<::grpc_test::CountAndSumResInstruct>(Arena*);
template<> ::grpc_test::CountAndSumResInstruct_CountDictEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc_test::CountAndSumResInstruct_CountDictEntry_DoNotUse>(Arena*);
template<> ::grpc_test::GetMinDisReq* Arena::CreateMaybeMessage<::grpc_test::GetMinDisReq>(Arena*);
template<> ::grpc_test::GetMinDisRsp* Arena::CreateMaybeMessage<::grpc_test::GetMinDisRsp>(Arena*);
template<> ::grpc_test::Letter* Arena::CreateMaybeMessage<::grpc_test::Letter>(Arena*);
template<> ::grpc_test::MessageData* Arena::CreateMaybeMessage<::grpc_test::MessageData>(Arena*);
template<> ::grpc_test::NumList* Arena::CreateMaybeMessage<::grpc_test::NumList>(Arena*);
template<> ::grpc_test::UpperLettersReq* Arena::CreateMaybeMessage<::grpc_test::UpperLettersReq>(Arena*);
template<> ::grpc_test::UpperLettersRsp* Arena::CreateMaybeMessage<::grpc_test::UpperLettersRsp>(Arena*);
template<> ::grpc_test::Vector* Arena::CreateMaybeMessage<::grpc_test::Vector>(Arena*);
template<> ::grpc_test::VectorList* Arena::CreateMaybeMessage<::grpc_test::VectorList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_test {

// ===================================================================

class Vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  virtual ~Vector();

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_test.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class VectorList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.VectorList) */ {
 public:
  inline VectorList() : VectorList(nullptr) {}
  virtual ~VectorList();

  VectorList(const VectorList& from);
  VectorList(VectorList&& from) noexcept
    : VectorList() {
    *this = ::std::move(from);
  }

  inline VectorList& operator=(const VectorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorList& operator=(VectorList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorList* internal_default_instance() {
    return reinterpret_cast<const VectorList*>(
               &_VectorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorList& a, VectorList& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorList* New() const final {
    return CreateMaybeMessage<VectorList>(nullptr);
  }

  VectorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorList& from);
  void MergeFrom(const VectorList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.VectorList";
  }
  protected:
  explicit VectorList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointListFieldNumber = 1,
  };
  // repeated .grpc_test.Vector point_list = 1;
  int point_list_size() const;
  private:
  int _internal_point_list_size() const;
  public:
  void clear_point_list();
  ::grpc_test::Vector* mutable_point_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Vector >*
      mutable_point_list();
  private:
  const ::grpc_test::Vector& _internal_point_list(int index) const;
  ::grpc_test::Vector* _internal_add_point_list();
  public:
  const ::grpc_test::Vector& point_list(int index) const;
  ::grpc_test::Vector* add_point_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Vector >&
      point_list() const;

  // @@protoc_insertion_point(class_scope:grpc_test.VectorList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Vector > point_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class GetMinDisReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.GetMinDisReq) */ {
 public:
  inline GetMinDisReq() : GetMinDisReq(nullptr) {}
  virtual ~GetMinDisReq();

  GetMinDisReq(const GetMinDisReq& from);
  GetMinDisReq(GetMinDisReq&& from) noexcept
    : GetMinDisReq() {
    *this = ::std::move(from);
  }

  inline GetMinDisReq& operator=(const GetMinDisReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMinDisReq& operator=(GetMinDisReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMinDisReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMinDisReq* internal_default_instance() {
    return reinterpret_cast<const GetMinDisReq*>(
               &_GetMinDisReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMinDisReq& a, GetMinDisReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMinDisReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMinDisReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMinDisReq* New() const final {
    return CreateMaybeMessage<GetMinDisReq>(nullptr);
  }

  GetMinDisReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMinDisReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMinDisReq& from);
  void MergeFrom(const GetMinDisReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMinDisReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.GetMinDisReq";
  }
  protected:
  explicit GetMinDisReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointListsFieldNumber = 1,
  };
  // repeated .grpc_test.VectorList point_lists = 1;
  int point_lists_size() const;
  private:
  int _internal_point_lists_size() const;
  public:
  void clear_point_lists();
  ::grpc_test::VectorList* mutable_point_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::VectorList >*
      mutable_point_lists();
  private:
  const ::grpc_test::VectorList& _internal_point_lists(int index) const;
  ::grpc_test::VectorList* _internal_add_point_lists();
  public:
  const ::grpc_test::VectorList& point_lists(int index) const;
  ::grpc_test::VectorList* add_point_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::VectorList >&
      point_lists() const;

  // @@protoc_insertion_point(class_scope:grpc_test.GetMinDisReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::VectorList > point_lists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class GetMinDisRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.GetMinDisRsp) */ {
 public:
  inline GetMinDisRsp() : GetMinDisRsp(nullptr) {}
  virtual ~GetMinDisRsp();

  GetMinDisRsp(const GetMinDisRsp& from);
  GetMinDisRsp(GetMinDisRsp&& from) noexcept
    : GetMinDisRsp() {
    *this = ::std::move(from);
  }

  inline GetMinDisRsp& operator=(const GetMinDisRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMinDisRsp& operator=(GetMinDisRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMinDisRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMinDisRsp* internal_default_instance() {
    return reinterpret_cast<const GetMinDisRsp*>(
               &_GetMinDisRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetMinDisRsp& a, GetMinDisRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMinDisRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMinDisRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMinDisRsp* New() const final {
    return CreateMaybeMessage<GetMinDisRsp>(nullptr);
  }

  GetMinDisRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMinDisRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMinDisRsp& from);
  void MergeFrom(const GetMinDisRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMinDisRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.GetMinDisRsp";
  }
  protected:
  explicit GetMinDisRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDisFieldNumber = 1,
  };
  // repeated float min_dis = 1;
  int min_dis_size() const;
  private:
  int _internal_min_dis_size() const;
  public:
  void clear_min_dis();
  private:
  float _internal_min_dis(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_min_dis() const;
  void _internal_add_min_dis(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_min_dis();
  public:
  float min_dis(int index) const;
  void set_min_dis(int index, float value);
  void add_min_dis(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      min_dis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_min_dis();

  // @@protoc_insertion_point(class_scope:grpc_test.GetMinDisRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > min_dis_;
  mutable std::atomic<int> _min_dis_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class NumList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.NumList) */ {
 public:
  inline NumList() : NumList(nullptr) {}
  virtual ~NumList();

  NumList(const NumList& from);
  NumList(NumList&& from) noexcept
    : NumList() {
    *this = ::std::move(from);
  }

  inline NumList& operator=(const NumList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumList& operator=(NumList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NumList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumList* internal_default_instance() {
    return reinterpret_cast<const NumList*>(
               &_NumList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NumList& a, NumList& b) {
    a.Swap(&b);
  }
  inline void Swap(NumList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumList* New() const final {
    return CreateMaybeMessage<NumList>(nullptr);
  }

  NumList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumList& from);
  void MergeFrom(const NumList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.NumList";
  }
  protected:
  explicit NumList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // repeated float num = 1;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  float _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_num() const;
  void _internal_add_num(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_num();
  public:
  float num(int index) const;
  void set_num(int index, float value);
  void add_num(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_num();

  // @@protoc_insertion_point(class_scope:grpc_test.NumList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > num_;
  mutable std::atomic<int> _num_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class CountAndSumListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.CountAndSumListReq) */ {
 public:
  inline CountAndSumListReq() : CountAndSumListReq(nullptr) {}
  virtual ~CountAndSumListReq();

  CountAndSumListReq(const CountAndSumListReq& from);
  CountAndSumListReq(CountAndSumListReq&& from) noexcept
    : CountAndSumListReq() {
    *this = ::std::move(from);
  }

  inline CountAndSumListReq& operator=(const CountAndSumListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountAndSumListReq& operator=(CountAndSumListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountAndSumListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountAndSumListReq* internal_default_instance() {
    return reinterpret_cast<const CountAndSumListReq*>(
               &_CountAndSumListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CountAndSumListReq& a, CountAndSumListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CountAndSumListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountAndSumListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountAndSumListReq* New() const final {
    return CreateMaybeMessage<CountAndSumListReq>(nullptr);
  }

  CountAndSumListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountAndSumListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountAndSumListReq& from);
  void MergeFrom(const CountAndSumListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountAndSumListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.CountAndSumListReq";
  }
  protected:
  explicit CountAndSumListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumListFieldNumber = 1,
  };
  // repeated .grpc_test.NumList num_list = 1;
  int num_list_size() const;
  private:
  int _internal_num_list_size() const;
  public:
  void clear_num_list();
  ::grpc_test::NumList* mutable_num_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::NumList >*
      mutable_num_list();
  private:
  const ::grpc_test::NumList& _internal_num_list(int index) const;
  ::grpc_test::NumList* _internal_add_num_list();
  public:
  const ::grpc_test::NumList& num_list(int index) const;
  ::grpc_test::NumList* add_num_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::NumList >&
      num_list() const;

  // @@protoc_insertion_point(class_scope:grpc_test.CountAndSumListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::NumList > num_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class CountAndSumResInstruct_CountDictEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CountAndSumResInstruct_CountDictEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CountAndSumResInstruct_CountDictEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  CountAndSumResInstruct_CountDictEntry_DoNotUse();
  explicit CountAndSumResInstruct_CountDictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CountAndSumResInstruct_CountDictEntry_DoNotUse& other);
  static const CountAndSumResInstruct_CountDictEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CountAndSumResInstruct_CountDictEntry_DoNotUse*>(&_CountAndSumResInstruct_CountDictEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc_test.CountAndSumResInstruct.CountDictEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class CountAndSumResInstruct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.CountAndSumResInstruct) */ {
 public:
  inline CountAndSumResInstruct() : CountAndSumResInstruct(nullptr) {}
  virtual ~CountAndSumResInstruct();

  CountAndSumResInstruct(const CountAndSumResInstruct& from);
  CountAndSumResInstruct(CountAndSumResInstruct&& from) noexcept
    : CountAndSumResInstruct() {
    *this = ::std::move(from);
  }

  inline CountAndSumResInstruct& operator=(const CountAndSumResInstruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountAndSumResInstruct& operator=(CountAndSumResInstruct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountAndSumResInstruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountAndSumResInstruct* internal_default_instance() {
    return reinterpret_cast<const CountAndSumResInstruct*>(
               &_CountAndSumResInstruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CountAndSumResInstruct& a, CountAndSumResInstruct& b) {
    a.Swap(&b);
  }
  inline void Swap(CountAndSumResInstruct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountAndSumResInstruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountAndSumResInstruct* New() const final {
    return CreateMaybeMessage<CountAndSumResInstruct>(nullptr);
  }

  CountAndSumResInstruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountAndSumResInstruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountAndSumResInstruct& from);
  void MergeFrom(const CountAndSumResInstruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountAndSumResInstruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.CountAndSumResInstruct";
  }
  protected:
  explicit CountAndSumResInstruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCountDictFieldNumber = 1,
    kSumResFieldNumber = 2,
  };
  // map<string, int32> count_dict = 1;
  int count_dict_size() const;
  private:
  int _internal_count_dict_size() const;
  public:
  void clear_count_dict();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_count_dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_count_dict();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      count_dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_count_dict();

  // float sum_res = 2;
  void clear_sum_res();
  float sum_res() const;
  void set_sum_res(float value);
  private:
  float _internal_sum_res() const;
  void _internal_set_sum_res(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_test.CountAndSumResInstruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CountAndSumResInstruct_CountDictEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > count_dict_;
  float sum_res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class CountAndSumListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.CountAndSumListRsp) */ {
 public:
  inline CountAndSumListRsp() : CountAndSumListRsp(nullptr) {}
  virtual ~CountAndSumListRsp();

  CountAndSumListRsp(const CountAndSumListRsp& from);
  CountAndSumListRsp(CountAndSumListRsp&& from) noexcept
    : CountAndSumListRsp() {
    *this = ::std::move(from);
  }

  inline CountAndSumListRsp& operator=(const CountAndSumListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountAndSumListRsp& operator=(CountAndSumListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountAndSumListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountAndSumListRsp* internal_default_instance() {
    return reinterpret_cast<const CountAndSumListRsp*>(
               &_CountAndSumListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CountAndSumListRsp& a, CountAndSumListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CountAndSumListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountAndSumListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountAndSumListRsp* New() const final {
    return CreateMaybeMessage<CountAndSumListRsp>(nullptr);
  }

  CountAndSumListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountAndSumListRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountAndSumListRsp& from);
  void MergeFrom(const CountAndSumListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountAndSumListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.CountAndSumListRsp";
  }
  protected:
  explicit CountAndSumListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountAndSumResFieldNumber = 1,
  };
  // repeated .grpc_test.CountAndSumResInstruct count_and_sum_res = 1;
  int count_and_sum_res_size() const;
  private:
  int _internal_count_and_sum_res_size() const;
  public:
  void clear_count_and_sum_res();
  ::grpc_test::CountAndSumResInstruct* mutable_count_and_sum_res(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::CountAndSumResInstruct >*
      mutable_count_and_sum_res();
  private:
  const ::grpc_test::CountAndSumResInstruct& _internal_count_and_sum_res(int index) const;
  ::grpc_test::CountAndSumResInstruct* _internal_add_count_and_sum_res();
  public:
  const ::grpc_test::CountAndSumResInstruct& count_and_sum_res(int index) const;
  ::grpc_test::CountAndSumResInstruct* add_count_and_sum_res();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::CountAndSumResInstruct >&
      count_and_sum_res() const;

  // @@protoc_insertion_point(class_scope:grpc_test.CountAndSumListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::CountAndSumResInstruct > count_and_sum_res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Letter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.Letter) */ {
 public:
  inline Letter() : Letter(nullptr) {}
  virtual ~Letter();

  Letter(const Letter& from);
  Letter(Letter&& from) noexcept
    : Letter() {
    *this = ::std::move(from);
  }

  inline Letter& operator=(const Letter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Letter& operator=(Letter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Letter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Letter* internal_default_instance() {
    return reinterpret_cast<const Letter*>(
               &_Letter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Letter& a, Letter& b) {
    a.Swap(&b);
  }
  inline void Swap(Letter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Letter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Letter* New() const final {
    return CreateMaybeMessage<Letter>(nullptr);
  }

  Letter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Letter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Letter& from);
  void MergeFrom(const Letter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Letter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.Letter";
  }
  protected:
  explicit Letter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
  };
  // string s = 1;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // @@protoc_insertion_point(class_scope:grpc_test.Letter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class UpperLettersReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.UpperLettersReq) */ {
 public:
  inline UpperLettersReq() : UpperLettersReq(nullptr) {}
  virtual ~UpperLettersReq();

  UpperLettersReq(const UpperLettersReq& from);
  UpperLettersReq(UpperLettersReq&& from) noexcept
    : UpperLettersReq() {
    *this = ::std::move(from);
  }

  inline UpperLettersReq& operator=(const UpperLettersReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpperLettersReq& operator=(UpperLettersReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpperLettersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpperLettersReq* internal_default_instance() {
    return reinterpret_cast<const UpperLettersReq*>(
               &_UpperLettersReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpperLettersReq& a, UpperLettersReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpperLettersReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpperLettersReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpperLettersReq* New() const final {
    return CreateMaybeMessage<UpperLettersReq>(nullptr);
  }

  UpperLettersReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpperLettersReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpperLettersReq& from);
  void MergeFrom(const UpperLettersReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpperLettersReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.UpperLettersReq";
  }
  protected:
  explicit UpperLettersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLetterListFieldNumber = 1,
  };
  // repeated .grpc_test.Letter letter_list = 1;
  int letter_list_size() const;
  private:
  int _internal_letter_list_size() const;
  public:
  void clear_letter_list();
  ::grpc_test::Letter* mutable_letter_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >*
      mutable_letter_list();
  private:
  const ::grpc_test::Letter& _internal_letter_list(int index) const;
  ::grpc_test::Letter* _internal_add_letter_list();
  public:
  const ::grpc_test::Letter& letter_list(int index) const;
  ::grpc_test::Letter* add_letter_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >&
      letter_list() const;

  // @@protoc_insertion_point(class_scope:grpc_test.UpperLettersReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter > letter_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class UpperLettersRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.UpperLettersRsp) */ {
 public:
  inline UpperLettersRsp() : UpperLettersRsp(nullptr) {}
  virtual ~UpperLettersRsp();

  UpperLettersRsp(const UpperLettersRsp& from);
  UpperLettersRsp(UpperLettersRsp&& from) noexcept
    : UpperLettersRsp() {
    *this = ::std::move(from);
  }

  inline UpperLettersRsp& operator=(const UpperLettersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpperLettersRsp& operator=(UpperLettersRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpperLettersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpperLettersRsp* internal_default_instance() {
    return reinterpret_cast<const UpperLettersRsp*>(
               &_UpperLettersRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpperLettersRsp& a, UpperLettersRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpperLettersRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpperLettersRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpperLettersRsp* New() const final {
    return CreateMaybeMessage<UpperLettersRsp>(nullptr);
  }

  UpperLettersRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpperLettersRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpperLettersRsp& from);
  void MergeFrom(const UpperLettersRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpperLettersRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.UpperLettersRsp";
  }
  protected:
  explicit UpperLettersRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLetterResListFieldNumber = 1,
  };
  // repeated .grpc_test.Letter letter_res_list = 1;
  int letter_res_list_size() const;
  private:
  int _internal_letter_res_list_size() const;
  public:
  void clear_letter_res_list();
  ::grpc_test::Letter* mutable_letter_res_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >*
      mutable_letter_res_list();
  private:
  const ::grpc_test::Letter& _internal_letter_res_list(int index) const;
  ::grpc_test::Letter* _internal_add_letter_res_list();
  public:
  const ::grpc_test::Letter& letter_res_list(int index) const;
  ::grpc_test::Letter* add_letter_res_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >&
      letter_res_list() const;

  // @@protoc_insertion_point(class_scope:grpc_test.UpperLettersRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter > letter_res_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// -------------------------------------------------------------------

class MessageData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_test.MessageData) */ {
 public:
  inline MessageData() : MessageData(nullptr) {}
  virtual ~MessageData();

  MessageData(const MessageData& from);
  MessageData(MessageData&& from) noexcept
    : MessageData() {
    *this = ::std::move(from);
  }

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageData& operator=(MessageData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageData* internal_default_instance() {
    return reinterpret_cast<const MessageData*>(
               &_MessageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MessageData& a, MessageData& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageData* New() const final {
    return CreateMaybeMessage<MessageData>(nullptr);
  }

  MessageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_test.MessageData";
  }
  protected:
  explicit MessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grpc_5ftest_2eproto);
    return ::descriptor_table_grpc_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_test.MessageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// float x = 1;
inline void Vector::clear_x() {
  x_ = 0;
}
inline float Vector::_internal_x() const {
  return x_;
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:grpc_test.Vector.x)
  return _internal_x();
}
inline void Vector::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:grpc_test.Vector.x)
}

// float y = 2;
inline void Vector::clear_y() {
  y_ = 0;
}
inline float Vector::_internal_y() const {
  return y_;
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:grpc_test.Vector.y)
  return _internal_y();
}
inline void Vector::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:grpc_test.Vector.y)
}

// float z = 3;
inline void Vector::clear_z() {
  z_ = 0;
}
inline float Vector::_internal_z() const {
  return z_;
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:grpc_test.Vector.z)
  return _internal_z();
}
inline void Vector::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:grpc_test.Vector.z)
}

// -------------------------------------------------------------------

// VectorList

// repeated .grpc_test.Vector point_list = 1;
inline int VectorList::_internal_point_list_size() const {
  return point_list_.size();
}
inline int VectorList::point_list_size() const {
  return _internal_point_list_size();
}
inline void VectorList::clear_point_list() {
  point_list_.Clear();
}
inline ::grpc_test::Vector* VectorList::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_test.VectorList.point_list)
  return point_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Vector >*
VectorList::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.VectorList.point_list)
  return &point_list_;
}
inline const ::grpc_test::Vector& VectorList::_internal_point_list(int index) const {
  return point_list_.Get(index);
}
inline const ::grpc_test::Vector& VectorList::point_list(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.VectorList.point_list)
  return _internal_point_list(index);
}
inline ::grpc_test::Vector* VectorList::_internal_add_point_list() {
  return point_list_.Add();
}
inline ::grpc_test::Vector* VectorList::add_point_list() {
  // @@protoc_insertion_point(field_add:grpc_test.VectorList.point_list)
  return _internal_add_point_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Vector >&
VectorList::point_list() const {
  // @@protoc_insertion_point(field_list:grpc_test.VectorList.point_list)
  return point_list_;
}

// -------------------------------------------------------------------

// GetMinDisReq

// repeated .grpc_test.VectorList point_lists = 1;
inline int GetMinDisReq::_internal_point_lists_size() const {
  return point_lists_.size();
}
inline int GetMinDisReq::point_lists_size() const {
  return _internal_point_lists_size();
}
inline void GetMinDisReq::clear_point_lists() {
  point_lists_.Clear();
}
inline ::grpc_test::VectorList* GetMinDisReq::mutable_point_lists(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_test.GetMinDisReq.point_lists)
  return point_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::VectorList >*
GetMinDisReq::mutable_point_lists() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.GetMinDisReq.point_lists)
  return &point_lists_;
}
inline const ::grpc_test::VectorList& GetMinDisReq::_internal_point_lists(int index) const {
  return point_lists_.Get(index);
}
inline const ::grpc_test::VectorList& GetMinDisReq::point_lists(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.GetMinDisReq.point_lists)
  return _internal_point_lists(index);
}
inline ::grpc_test::VectorList* GetMinDisReq::_internal_add_point_lists() {
  return point_lists_.Add();
}
inline ::grpc_test::VectorList* GetMinDisReq::add_point_lists() {
  // @@protoc_insertion_point(field_add:grpc_test.GetMinDisReq.point_lists)
  return _internal_add_point_lists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::VectorList >&
GetMinDisReq::point_lists() const {
  // @@protoc_insertion_point(field_list:grpc_test.GetMinDisReq.point_lists)
  return point_lists_;
}

// -------------------------------------------------------------------

// GetMinDisRsp

// repeated float min_dis = 1;
inline int GetMinDisRsp::_internal_min_dis_size() const {
  return min_dis_.size();
}
inline int GetMinDisRsp::min_dis_size() const {
  return _internal_min_dis_size();
}
inline void GetMinDisRsp::clear_min_dis() {
  min_dis_.Clear();
}
inline float GetMinDisRsp::_internal_min_dis(int index) const {
  return min_dis_.Get(index);
}
inline float GetMinDisRsp::min_dis(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.GetMinDisRsp.min_dis)
  return _internal_min_dis(index);
}
inline void GetMinDisRsp::set_min_dis(int index, float value) {
  min_dis_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc_test.GetMinDisRsp.min_dis)
}
inline void GetMinDisRsp::_internal_add_min_dis(float value) {
  min_dis_.Add(value);
}
inline void GetMinDisRsp::add_min_dis(float value) {
  _internal_add_min_dis(value);
  // @@protoc_insertion_point(field_add:grpc_test.GetMinDisRsp.min_dis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetMinDisRsp::_internal_min_dis() const {
  return min_dis_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetMinDisRsp::min_dis() const {
  // @@protoc_insertion_point(field_list:grpc_test.GetMinDisRsp.min_dis)
  return _internal_min_dis();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetMinDisRsp::_internal_mutable_min_dis() {
  return &min_dis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetMinDisRsp::mutable_min_dis() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.GetMinDisRsp.min_dis)
  return _internal_mutable_min_dis();
}

// -------------------------------------------------------------------

// NumList

// repeated float num = 1;
inline int NumList::_internal_num_size() const {
  return num_.size();
}
inline int NumList::num_size() const {
  return _internal_num_size();
}
inline void NumList::clear_num() {
  num_.Clear();
}
inline float NumList::_internal_num(int index) const {
  return num_.Get(index);
}
inline float NumList::num(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.NumList.num)
  return _internal_num(index);
}
inline void NumList::set_num(int index, float value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc_test.NumList.num)
}
inline void NumList::_internal_add_num(float value) {
  num_.Add(value);
}
inline void NumList::add_num(float value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:grpc_test.NumList.num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NumList::_internal_num() const {
  return num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NumList::num() const {
  // @@protoc_insertion_point(field_list:grpc_test.NumList.num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NumList::_internal_mutable_num() {
  return &num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NumList::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.NumList.num)
  return _internal_mutable_num();
}

// -------------------------------------------------------------------

// CountAndSumListReq

// repeated .grpc_test.NumList num_list = 1;
inline int CountAndSumListReq::_internal_num_list_size() const {
  return num_list_.size();
}
inline int CountAndSumListReq::num_list_size() const {
  return _internal_num_list_size();
}
inline void CountAndSumListReq::clear_num_list() {
  num_list_.Clear();
}
inline ::grpc_test::NumList* CountAndSumListReq::mutable_num_list(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_test.CountAndSumListReq.num_list)
  return num_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::NumList >*
CountAndSumListReq::mutable_num_list() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.CountAndSumListReq.num_list)
  return &num_list_;
}
inline const ::grpc_test::NumList& CountAndSumListReq::_internal_num_list(int index) const {
  return num_list_.Get(index);
}
inline const ::grpc_test::NumList& CountAndSumListReq::num_list(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.CountAndSumListReq.num_list)
  return _internal_num_list(index);
}
inline ::grpc_test::NumList* CountAndSumListReq::_internal_add_num_list() {
  return num_list_.Add();
}
inline ::grpc_test::NumList* CountAndSumListReq::add_num_list() {
  // @@protoc_insertion_point(field_add:grpc_test.CountAndSumListReq.num_list)
  return _internal_add_num_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::NumList >&
CountAndSumListReq::num_list() const {
  // @@protoc_insertion_point(field_list:grpc_test.CountAndSumListReq.num_list)
  return num_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CountAndSumResInstruct

// map<string, int32> count_dict = 1;
inline int CountAndSumResInstruct::_internal_count_dict_size() const {
  return count_dict_.size();
}
inline int CountAndSumResInstruct::count_dict_size() const {
  return _internal_count_dict_size();
}
inline void CountAndSumResInstruct::clear_count_dict() {
  count_dict_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
CountAndSumResInstruct::_internal_count_dict() const {
  return count_dict_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
CountAndSumResInstruct::count_dict() const {
  // @@protoc_insertion_point(field_map:grpc_test.CountAndSumResInstruct.count_dict)
  return _internal_count_dict();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
CountAndSumResInstruct::_internal_mutable_count_dict() {
  return count_dict_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
CountAndSumResInstruct::mutable_count_dict() {
  // @@protoc_insertion_point(field_mutable_map:grpc_test.CountAndSumResInstruct.count_dict)
  return _internal_mutable_count_dict();
}

// float sum_res = 2;
inline void CountAndSumResInstruct::clear_sum_res() {
  sum_res_ = 0;
}
inline float CountAndSumResInstruct::_internal_sum_res() const {
  return sum_res_;
}
inline float CountAndSumResInstruct::sum_res() const {
  // @@protoc_insertion_point(field_get:grpc_test.CountAndSumResInstruct.sum_res)
  return _internal_sum_res();
}
inline void CountAndSumResInstruct::_internal_set_sum_res(float value) {
  
  sum_res_ = value;
}
inline void CountAndSumResInstruct::set_sum_res(float value) {
  _internal_set_sum_res(value);
  // @@protoc_insertion_point(field_set:grpc_test.CountAndSumResInstruct.sum_res)
}

// -------------------------------------------------------------------

// CountAndSumListRsp

// repeated .grpc_test.CountAndSumResInstruct count_and_sum_res = 1;
inline int CountAndSumListRsp::_internal_count_and_sum_res_size() const {
  return count_and_sum_res_.size();
}
inline int CountAndSumListRsp::count_and_sum_res_size() const {
  return _internal_count_and_sum_res_size();
}
inline void CountAndSumListRsp::clear_count_and_sum_res() {
  count_and_sum_res_.Clear();
}
inline ::grpc_test::CountAndSumResInstruct* CountAndSumListRsp::mutable_count_and_sum_res(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_test.CountAndSumListRsp.count_and_sum_res)
  return count_and_sum_res_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::CountAndSumResInstruct >*
CountAndSumListRsp::mutable_count_and_sum_res() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.CountAndSumListRsp.count_and_sum_res)
  return &count_and_sum_res_;
}
inline const ::grpc_test::CountAndSumResInstruct& CountAndSumListRsp::_internal_count_and_sum_res(int index) const {
  return count_and_sum_res_.Get(index);
}
inline const ::grpc_test::CountAndSumResInstruct& CountAndSumListRsp::count_and_sum_res(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.CountAndSumListRsp.count_and_sum_res)
  return _internal_count_and_sum_res(index);
}
inline ::grpc_test::CountAndSumResInstruct* CountAndSumListRsp::_internal_add_count_and_sum_res() {
  return count_and_sum_res_.Add();
}
inline ::grpc_test::CountAndSumResInstruct* CountAndSumListRsp::add_count_and_sum_res() {
  // @@protoc_insertion_point(field_add:grpc_test.CountAndSumListRsp.count_and_sum_res)
  return _internal_add_count_and_sum_res();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::CountAndSumResInstruct >&
CountAndSumListRsp::count_and_sum_res() const {
  // @@protoc_insertion_point(field_list:grpc_test.CountAndSumListRsp.count_and_sum_res)
  return count_and_sum_res_;
}

// -------------------------------------------------------------------

// Letter

// string s = 1;
inline void Letter::clear_s() {
  s_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Letter::s() const {
  // @@protoc_insertion_point(field_get:grpc_test.Letter.s)
  return _internal_s();
}
inline void Letter::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:grpc_test.Letter.s)
}
inline std::string* Letter::mutable_s() {
  // @@protoc_insertion_point(field_mutable:grpc_test.Letter.s)
  return _internal_mutable_s();
}
inline const std::string& Letter::_internal_s() const {
  return s_.Get();
}
inline void Letter::_internal_set_s(const std::string& value) {
  
  s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Letter::set_s(std::string&& value) {
  
  s_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_test.Letter.s)
}
inline void Letter::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_test.Letter.s)
}
inline void Letter::set_s(const char* value,
    size_t size) {
  
  s_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_test.Letter.s)
}
inline std::string* Letter::_internal_mutable_s() {
  
  return s_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Letter::release_s() {
  // @@protoc_insertion_point(field_release:grpc_test.Letter.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Letter::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_test.Letter.s)
}

// -------------------------------------------------------------------

// UpperLettersReq

// repeated .grpc_test.Letter letter_list = 1;
inline int UpperLettersReq::_internal_letter_list_size() const {
  return letter_list_.size();
}
inline int UpperLettersReq::letter_list_size() const {
  return _internal_letter_list_size();
}
inline void UpperLettersReq::clear_letter_list() {
  letter_list_.Clear();
}
inline ::grpc_test::Letter* UpperLettersReq::mutable_letter_list(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_test.UpperLettersReq.letter_list)
  return letter_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >*
UpperLettersReq::mutable_letter_list() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.UpperLettersReq.letter_list)
  return &letter_list_;
}
inline const ::grpc_test::Letter& UpperLettersReq::_internal_letter_list(int index) const {
  return letter_list_.Get(index);
}
inline const ::grpc_test::Letter& UpperLettersReq::letter_list(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.UpperLettersReq.letter_list)
  return _internal_letter_list(index);
}
inline ::grpc_test::Letter* UpperLettersReq::_internal_add_letter_list() {
  return letter_list_.Add();
}
inline ::grpc_test::Letter* UpperLettersReq::add_letter_list() {
  // @@protoc_insertion_point(field_add:grpc_test.UpperLettersReq.letter_list)
  return _internal_add_letter_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >&
UpperLettersReq::letter_list() const {
  // @@protoc_insertion_point(field_list:grpc_test.UpperLettersReq.letter_list)
  return letter_list_;
}

// -------------------------------------------------------------------

// UpperLettersRsp

// repeated .grpc_test.Letter letter_res_list = 1;
inline int UpperLettersRsp::_internal_letter_res_list_size() const {
  return letter_res_list_.size();
}
inline int UpperLettersRsp::letter_res_list_size() const {
  return _internal_letter_res_list_size();
}
inline void UpperLettersRsp::clear_letter_res_list() {
  letter_res_list_.Clear();
}
inline ::grpc_test::Letter* UpperLettersRsp::mutable_letter_res_list(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_test.UpperLettersRsp.letter_res_list)
  return letter_res_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >*
UpperLettersRsp::mutable_letter_res_list() {
  // @@protoc_insertion_point(field_mutable_list:grpc_test.UpperLettersRsp.letter_res_list)
  return &letter_res_list_;
}
inline const ::grpc_test::Letter& UpperLettersRsp::_internal_letter_res_list(int index) const {
  return letter_res_list_.Get(index);
}
inline const ::grpc_test::Letter& UpperLettersRsp::letter_res_list(int index) const {
  // @@protoc_insertion_point(field_get:grpc_test.UpperLettersRsp.letter_res_list)
  return _internal_letter_res_list(index);
}
inline ::grpc_test::Letter* UpperLettersRsp::_internal_add_letter_res_list() {
  return letter_res_list_.Add();
}
inline ::grpc_test::Letter* UpperLettersRsp::add_letter_res_list() {
  // @@protoc_insertion_point(field_add:grpc_test.UpperLettersRsp.letter_res_list)
  return _internal_add_letter_res_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_test::Letter >&
UpperLettersRsp::letter_res_list() const {
  // @@protoc_insertion_point(field_list:grpc_test.UpperLettersRsp.letter_res_list)
  return letter_res_list_;
}

// -------------------------------------------------------------------

// MessageData

// int32 id = 1;
inline void MessageData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageData::id() const {
  // @@protoc_insertion_point(field_get:grpc_test.MessageData.id)
  return _internal_id();
}
inline void MessageData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MessageData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpc_test.MessageData.id)
}

// string name = 2;
inline void MessageData::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MessageData::name() const {
  // @@protoc_insertion_point(field_get:grpc_test.MessageData.name)
  return _internal_name();
}
inline void MessageData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_test.MessageData.name)
}
inline std::string* MessageData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_test.MessageData.name)
  return _internal_mutable_name();
}
inline const std::string& MessageData::_internal_name() const {
  return name_.Get();
}
inline void MessageData::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageData::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_test.MessageData.name)
}
inline void MessageData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_test.MessageData.name)
}
inline void MessageData::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_test.MessageData.name)
}
inline std::string* MessageData::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageData::release_name() {
  // @@protoc_insertion_point(field_release:grpc_test.MessageData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_test.MessageData.name)
}

// bytes data = 3;
inline void MessageData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MessageData::data() const {
  // @@protoc_insertion_point(field_get:grpc_test.MessageData.data)
  return _internal_data();
}
inline void MessageData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:grpc_test.MessageData.data)
}
inline std::string* MessageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_test.MessageData.data)
  return _internal_mutable_data();
}
inline const std::string& MessageData::_internal_data() const {
  return data_.Get();
}
inline void MessageData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_test.MessageData.data)
}
inline void MessageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_test.MessageData.data)
}
inline void MessageData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_test.MessageData.data)
}
inline std::string* MessageData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageData::release_data() {
  // @@protoc_insertion_point(field_release:grpc_test.MessageData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_test.MessageData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpc_5ftest_2eproto
