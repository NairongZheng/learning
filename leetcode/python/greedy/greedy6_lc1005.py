

def largestSumAfterKNegations(nums, k):
    """
        K次取反后最大化的数组和
        给定一个整数数组A, 我们只能用以下方法修改该数组: 
        我们选择某个索引 i 并将 A[i] 替换为 -A[i], 然后总共重复这个过程 K 次(我们可以多次选择同一个索引 i)

        贪心的思路, 局部最优：让绝对值大的负数变为正数, 当前数值达到最大, 整体最优：整个数组和达到最大。
        那么如果将负数都转变为正数了, K依然大于0, 此时的问题是一个有序正整数序列, 如何转变K次正负, 让 数组和 达到最大。
        那么又是一个贪心：局部最优：只找数值最小的正整数进行反转, 当前数值可以达到最大
        （例如正整数数组{5, 3, 1}, 反转1 得到-1 比 反转5得到的-5 大多了）, 全局最优：整个 数组和 达到最大。
        步骤：
        第一步：将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小
        第二步：从前向后遍历，遇到负数将其变为正数，同时K--
        第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完
        第四步：求和
    """
    nums = sorted(nums, key=lambda x:abs(x), reverse=True)
    for i in range(len(nums)):
        if k > 0 and nums[i] < 0:
            nums[i] = -nums[i]
            k -= 1
    if k > 0:
        nums[-1] = nums[-1] * (-1) ** k
    return sum(nums)

aaa = largestSumAfterKNegations([3,-1,0,2], 3)
print(aaa)