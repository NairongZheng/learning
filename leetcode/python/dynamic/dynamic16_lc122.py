

def maxProfit(prices):
    """
        买卖股票的最佳时机II
        给定一个数组, 它的第 i 个元素是一支给定股票第 i 天的价格
        设计一个算法来计算你所能获取的最大利润. 你可以尽可能地完成更多的交易(多次买卖一支股票)
        注意: 你不能同时参与多笔交易(你必须在再次购买前出售掉之前的股票)

        思路: 要想清楚两点:(1)只有一只股票; (2)当前只有买股票或卖股票操作
        股票价格[7,1,5,10,3,6,4]; 每天利润[-6,4,5,-7,3,-2]
        贪心: 只收集每天正利润: 4+5+3=12
    """
    # 动态规划
    dp = [[0] * 2 for _ in range(len(prices))]  # dp[i][0]表示第i天持有股票所得最多现金, dp[i][1]表示第i天不持有股票所得最多现金
    dp[0][0] = -prices[0]
    dp[0][1] = 0
    for i in range(1, len(prices)):
        # 递推公式dp[i][0]是与上一题唯一区别的地方, 因为这题一只股票可以买卖多次,  所以买入股票的时候, 可能会有之前买卖的利润
        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])  # (1)第i-1天就持有股票, 那么就保持现状; (2)第i天买入股票, 所得现金就是昨天不持有股票的所得现金减去今天的股票价格 
        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])  # (1)第i-1天就不持有股票, 那么就保持现状; (2)第i天卖出股票, 所得现金就是按照今天股票佳价格卖出后所得现金
    return dp[-1][1]

    # # 贪心算法
    # result = 0
    # for i in range(1, len(prices)):
    #     result += max(prices[i] - prices[i - 1], 0)
    # return result

aaa = maxProfit([7,1,5,10,3,6,4])
print(aaa)

